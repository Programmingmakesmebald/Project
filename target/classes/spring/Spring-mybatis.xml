<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xmlns:lang="http://www.springframework.org/schema/lang"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:util="http://www.springframework.org/schema/util" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd
		//http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.3.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-4.3.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
    <!--扫入heuet.edu下的注解，将Controller注解排除在外-->
    <context:component-scan base-package="edu.heuet">
        <context:exclude-filter type="annotation"
                                expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    <!--    引入数据库相关的信息的配置文件-->
    <context:property-placeholder  location="classpath:db.properties"/>

    <!-- 数据源配置, 使用 Druid 数据库连接池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
        <property name="driverClassName" value="${jdbc.driverClass}"/>

        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc.connectionURL}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${jdbc.pool.init}"/>
        <property name="minIdle" value="${jdbc.pool.minIdle}"/>
        <property name="maxActive" value="${jdbc.pool.maxActive}"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>

        <property name="validationQuery" value="${jdbc.testSql}"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat"/>
    </bean>

    <!--<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"></property>
        <property name="jdbcUrl" value="${jdbc.url}"></property>
        <property name="user" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
        &lt;!&ndash;        如果有需要，请把所有属性全部写到properties文件当中&ndash;&gt;
        &lt;!&ndash;        c3p0连接池的私有属性&ndash;&gt;

        <property name="maxPoolSize" value="100"></property>
        &lt;!&ndash;        <property name="minPoolSize" value="10"></property>&ndash;&gt;
        &lt;!&ndash;        关闭连接后不自动commit&ndash;&gt;
        <property name="autoCommitOnClose" value="false"/>
        &lt;!&ndash;        获取连接超市时间&ndash;&gt;
        <property name="checkoutTimeout" value="100000"/>
        &lt;!&ndash;        当获取连接失败重试次数&ndash;&gt;
        <property name="acquireRetryAttempts" value="2"/>
    </bean>-->
    <bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!--        引入mappers文件-->
        <!--     -->
        <!--        这就是要求所有的mapper文件必须在mapper包之下-->
        <property name="mapperLocations" value="classpath:edu/heuet/Mapper/**/*.xml"/>
        <property name="configuration">
            <bean class="org.apache.ibatis.session.Configuration">
                <!--                可以加入驼峰命名，其他mybatis的配置也就是mybatis.cfg.xml的相关配置都会转移到这里来-->
                <property name="mapUnderscoreToCamelCase" value="true"></property>
            </bean>
        </property>
<!--            插件配置  用的时候在配置-->
                <property name="plugins">
                    <array>
                        <!--                分页插件的配置,拦截器实现分页功能-->
                        <bean class="com.github.pagehelper.PageInterceptor">
        <!--                    这里的几个配置主要演示如何使用,如果不理解一定去掉下面的配置-->
                                <property name="properties">
                                    <value>
                                        helperDiaect=mysql
                                        reasonable=true
                                        supportMethodsArguments=true
                                        params=count=countSql
                                        autoRuntimeDialect=true
                                    </value>
                                </property>

                        </bean>

                    </array>
                </property>
    </bean>
    <!--    持久层接口 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="edu.heuet.Mapper"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryBean"/>
    </bean>
    <!--    事务管理   使用数据源事务管理类进行管理-->
    <bean class="org.springframework.jdbc.datasource.DataSourceTransactionManager" id="transactionManager" >
        <property name="dataSource"  ref="dataSource"></property>
    </bean>
    <!--    确定事务管理的策略transaction-manager;指定上面的transactionManage-->
    <tx:advice transaction-manager="transactionManager" id="transactionAdvice">
        <!--        事务处理的相关值及他的传播性-->
        <tx:attributes>
            <!--            查询相关配置只为读select开头或者get  或者query-->
            <tx:method name="select*" read-only="true"/>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="query*" read-only="true"/>
            <tx:method name="delete*" propagation="REQUIRED"  rollback-for="Exception"/>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="add*" propagation="REQUIRED" rollback-for="Exception"/>
        </tx:attributes>
    </tx:advice>
    <!--    使用aop对事务管理的范围进行织入  明确几个点1. 对哪些地方需要进行事务的管理exception书写,明确边界 2.使用什么策略去管理-->
    <!--    策略我们使用了tx:Advice 全部书写其中,在我们的AOP的advisor当中只需要去引用这个事务管理者的建议即可-->
    <aop:config>
        <aop:pointcut id="txCut" expression="execution(* edu.heuet.Service..*.*(..))"/>
        <aop:advisor advice-ref="transactionAdvice" pointcut-ref="txCut"/>
    </aop:config>
    <!--    采用注解进行事务配置,请在Service的实现类上面加上@Transanctional 注解-->
    <tx:annotation-driven transaction-manager="transactionManager" />

</beans>
